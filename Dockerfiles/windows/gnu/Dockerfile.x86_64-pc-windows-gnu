FROM ubuntu:20.04 as cross-base

RUN dpkg --add-architecture i386 && apt update && apt install -y --no-install-recommends \
    libz-mingw-w64-dev

COPY script/windows/*.sh /
RUN /wine.sh

RUN apt install -y --no-install-recommends \
    g++-mingw-w64-x86-64 \
    gfortran-mingw-w64-x86-64

# same as cross
RUN mkdir -p /usr/lib/binfmt-support/ && \
    rm -f /usr/lib/binfmt-support/run-detectors /usr/bin/run-detectors && \
    ln -s /usr/bin/wine /usr/lib/binfmt-support/run-detectors && \
    ln -s /usr/bin/wine /usr/bin/run-detectors \

ENTRYPOINT ["/msvc-windows-entry.sh"]

COPY script/toolchain.cmake /opt/toolchain.cmake

# for why we always link with pthread support, see:
# https://github.com/cross-rs/cross/pull/1123#issuecomment-1312287148
ENV CROSS_TOOLCHAIN_PREFIX=x86_64-w64-mingw32-
ENV CROSS_TOOLCHAIN_SUFFIX=-posix
ENV CROSS_SYSROOT=/usr/x86_64-w64-mingw32
ENV CROSS_TARGET_RUNNER="env -u CARGO_TARGET_X86_64_PC_WINDOWS_GNU_RUNNER wine"
ENV CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER="$CROSS_TOOLCHAIN_PREFIX"gcc"$CROSS_TOOLCHAIN_SUFFIX" \
    CARGO_TARGET_X86_64_PC_WINDOWS_GNU_RUNNER="$CROSS_TARGET_RUNNER" \
    AR_x86_64_pc_windows_gnu="$CROSS_TOOLCHAIN_PREFIX"ar \
    CC_x86_64_pc_windows_gnu="$CROSS_TOOLCHAIN_PREFIX"gcc"$CROSS_TOOLCHAIN_SUFFIX" \
    CXX_x86_64_pc_windows_gnu="$CROSS_TOOLCHAIN_PREFIX"g++"$CROSS_TOOLCHAIN_SUFFIX" \
    CMAKE_TOOLCHAIN_FILE_x86_64_pc_windows_gnu=/opt/toolchain.cmake \
    BINDGEN_EXTRA_CLANG_ARGS_x86_64_pc_windows_gnu="--sysroot=$CROSS_SYSROOT -idirafter/usr/include" \
    CROSS_CMAKE_SYSTEM_NAME=Windows \
    CROSS_CMAKE_SYSTEM_PROCESSOR=AMD64 \
    CROSS_CMAKE_CRT=gnu \
    CROSS_CMAKE_OBJECT_FLAGS="-ffunction-sections -fdata-sections -m64"

FROM cross-base as build

ARG TOOLCHAIN_VERSION
ENV RUSTUP_HOME=/root/rustup
ENV CARGO_HOME=/root/cargo
COPY script/rust-and-xargo.sh /
ENV PATH=$CARGO_HOME/bin:$PATH
RUN /rust-and-xargo.sh ${TOOLCHAIN_VERSION}
RUN rustup target add x86_64-pc-windows-gnu
RUN apt clean && rm -rf /var/lib/apt/lists/* /var/tmp/* /tmp/*
WORKDIR /root/src
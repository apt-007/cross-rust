FROM ubuntu:20.04 as cross-base

ENV DEBIAN_FRONTEND=noninteractive

COPY script/common.sh script/lib.sh /
RUN /common.sh

COPY script/cmake.sh /
RUN /cmake.sh

# run these in separate steps, so we can cache MSVC between all images.
COPY script/windows/msvc/*.sh /
RUN /msvc-wine.sh

COPY script/windows/wine.sh /
RUN /wine.sh

# need windows-style perl for paths
COPY script/perl.sh /
RUN /perl.sh

ARG ARCH=x86
RUN /msvc-wine-symlink.sh $ARCH
RUN mkdir -p /usr/lib/binfmt-support/ && \
    rm -f /usr/lib/binfmt-support/run-detectors /usr/bin/run-detectors && \
    ln -s /usr/bin/wine /usr/lib/binfmt-support/run-detectors && \
    ln -s /usr/bin/wine /usr/bin/run-detectors

ENTRYPOINT ["/msvc-windows-entry.sh"]

ENV CROSS_SYSROOT=/opt/msvc/vc/tools/msvc/latest
ENV CARGO_TARGET_I686_PC_WINDOWS_MSVC_LINKER=link.exe \
    CARGO_TARGET_I686_PC_WINDOWS_MSVC_RUNNER=wine \
    CC_i686_pc_windows_msvc=cl.exe \
    CXX_i686_pc_windows_msvc=cl.exe \
    PATH=/opt/msvc/bin/$ARCH:$PATH \
    WINEPATH="$WINEPATH;C:/windows/syswow64;C:/windows/system32;/opt/msvc/bin/$ARCH" \
    VSINSTALLDIR="/opt/msvc" \
    VCINSTALLDIR="/opt/msvc/vc" \
    VSCMD_ARG_TGT_ARCH=$ARCH

FROM cross-base as build

ARG TOOLCHAIN_VERSION
ENV RUSTUP_HOME=/root/rustup
ENV CARGO_HOME=/root/cargo
COPY script/rust-and-xargo.sh /
ENV PATH=$CARGO_HOME/bin:$PATH
RUN /rust-and-xargo.sh ${TOOLCHAIN_VERSION}
RUN rustup target add i686-pc-windows-msvc
RUN apt clean && rm -rf /var/lib/apt/lists/* /var/tmp/* /tmp/*
WORKDIR /root/src
RUN cargo install --force cargo-make